<?php

namespace App\Models;

// use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Laravel\Sanctum\HasApiTokens;
use Spatie\Permission\Traits\HasRoles;

class User extends Authenticatable
{
    use HasApiTokens, HasFactory, Notifiable, HasRoles;


    /**
     * The attributes that are mass assignable.
     *
     * @var array<int, string>
     */
    protected $fillable = [
        'name',
        'email',
        'password',
        'profile_picture'
    ];

    /**
     * The attributes that should be hidden for serialization.
     *
     * @var array<int, string>
     */
    protected $hidden = [
        'password',
        'remember_token',
    ];

    /**
     * The attributes that should be cast.
     *
     * @var array<string, string>
     */
    protected $casts = [
        'email_verified_at' => 'datetime',
        'password' => 'hashed',
    ];

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        self::created(function ($user) {
            Account::create([
                'user_id' => $user->id,
                'balance' => 0
            ]);
        });
    }

    public function instructor()
    {
        return $this->hasOne(Instructor::class);
    }


    public function courses()
    {
        return $this->belongsToMany(Course::class)->withTimestamps();
    }

    public function coursesForInstructor(){
        return $this->hasMany(Course::class,'instructor_id',"id");
    }


    public function rates()
    {
        return $this->hasMany(Rate::class);
    }

    public function account()
    {
        return $this->hasOne(Account::class);
    }

    public function InstructorCourse()
    {
        return $this->hasOneThrough(Course::class, Instructor::class);
    }

    public function transactions()
    {
        return $this->hasManyThrough(Transaction::class, Account::class, 'user_id', 'account_id', 'id', 'id');
    }

    public function transactionsForInstructor()
    {
        return $this->hasManyThrough(Transaction::class, Account::class, 'user_id', 'intended_account_id', 'id', 'id');
    }

    public function questions(): BelongsToMany
    {
        return $this->belongsToMany(Question::class, 'user_answers')
            ->withPivot('answer', 'mark','id')
            ->withTimestamps();
    }

}
